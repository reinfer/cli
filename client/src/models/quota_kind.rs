/*
 * Communications Mining - OpenAPI 3.1
 *
 * # Overview  Welcome to the Communications Mining API. We strive to make the API predictable, easy to use and painless to integrate.  Other resources: - [Communications Mining Product Documentation](https://docs.uipath.com/communications-mining/automation-cloud/latest) - [Communications Mining API Tutorials](https://docs.uipath.com/communications-mining/automation-cloud/latest/developer-guide/tutorials)  ## API Endpoint  All API requests are sent to Communications Mining as JSON objects to an endpoint over HTTPS.  ### Development and production environments  In Communications Mining, development and production data and workflows are separated by placing them in separate projects, each of which is permissioned separately (so that developers can have admin access in the development projects while having stricter access controls in production). Both development and production data are accessed over the same API URL.  ## Authentication  All API requests require authentication to identify the user making the request. Authentication is provided through an access token. The developer access token can be obtained from your Manage Account page.  You need to include the following HTTP header for every API call you make, where `$API_TOKEN` is your Communications Mining API token.  ```txt Authorization: Bearer $API_TOKEN ```  ## Permissions  Each API endpoint lists its required  permissions. You can view the permissions you have by going to your Manage Account page.  ## Errors  We use conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the `2xx` range indicate success, codes in the `4xx` range indicate an error that resulted from the provided request and codes in the `5xx` range indicate a problem with the Communications Mining platform.  Requests that error will also return a body with a `status` value of `error` instead of `ok`, and an error message describing the error.  ```json {   \"message\": \"404 Not Found\",   \"status\": \"error\" } ```  Note that your request can fail due to issues in your network before it reaches Communications Mining. In such cases the response you receive will look different from the Communications Mining error response described above.  ## Performance Timing  We use the [Server-Timing HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing) to communicate the time taken for requests to our API to be processed. We include a single metric, `total`, which you can use to measure how long our platform took to process your request free from latency of the network request.  An example of the header as it will be seen in a response:  ```txt Server-Timing: total;dur=37.7 ```  `Server-Timing` values are always in milliseconds, so in this case the API request with this header value took 37.7 milliseconds to process on our platform. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// QuotaKind : An enumeration.
/// An enumeration.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QuotaKind {
    #[serde(rename = "alerts")]
    Alerts,
    #[serde(rename = "buckets")]
    Buckets,
    #[serde(rename = "comments")]
    Comments,
    #[serde(rename = "comments_per_source")]
    CommentsPerSource,
    #[serde(rename = "comments_in_ixp_runtime")]
    CommentsInIxpRuntime,
    #[serde(rename = "comments_in_ixp_designtime")]
    CommentsInIxpDesigntime,
    #[serde(rename = "datasets")]
    Datasets,
    #[serde(rename = "datasets_per_source")]
    DatasetsPerSource,
    #[serde(rename = "entities_per_dataset")]
    EntitiesPerDataset,
    #[serde(rename = "integrations")]
    Integrations,
    #[serde(rename = "labels_per_dataset")]
    LabelsPerDataset,
    #[serde(rename = "mailboxes_per_integration")]
    MailboxesPerIntegration,
    #[serde(rename = "pinned_models")]
    PinnedModels,
    #[serde(rename = "projects")]
    Projects,
    #[serde(rename = "reviewed_comments_per_dataset")]
    ReviewedCommentsPerDataset,
    #[serde(rename = "sources")]
    Sources,
    #[serde(rename = "sources_per_dataset")]
    SourcesPerDataset,
    #[serde(rename = "triggers")]
    Triggers,
    #[serde(rename = "triggers_per_dataset")]
    TriggersPerDataset,
    #[serde(rename = "users")]
    Users,
    #[serde(rename = "extraction_predictions")]
    ExtractionPredictions,

}

impl std::fmt::Display for QuotaKind {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Alerts => write!(f, "alerts"),
            Self::Buckets => write!(f, "buckets"),
            Self::Comments => write!(f, "comments"),
            Self::CommentsPerSource => write!(f, "comments_per_source"),
            Self::CommentsInIxpRuntime => write!(f, "comments_in_ixp_runtime"),
            Self::CommentsInIxpDesigntime => write!(f, "comments_in_ixp_designtime"),
            Self::Datasets => write!(f, "datasets"),
            Self::DatasetsPerSource => write!(f, "datasets_per_source"),
            Self::EntitiesPerDataset => write!(f, "entities_per_dataset"),
            Self::Integrations => write!(f, "integrations"),
            Self::LabelsPerDataset => write!(f, "labels_per_dataset"),
            Self::MailboxesPerIntegration => write!(f, "mailboxes_per_integration"),
            Self::PinnedModels => write!(f, "pinned_models"),
            Self::Projects => write!(f, "projects"),
            Self::ReviewedCommentsPerDataset => write!(f, "reviewed_comments_per_dataset"),
            Self::Sources => write!(f, "sources"),
            Self::SourcesPerDataset => write!(f, "sources_per_dataset"),
            Self::Triggers => write!(f, "triggers"),
            Self::TriggersPerDataset => write!(f, "triggers_per_dataset"),
            Self::Users => write!(f, "users"),
            Self::ExtractionPredictions => write!(f, "extraction_predictions"),
        }
    }
}

impl Default for QuotaKind {
    fn default() -> QuotaKind {
        Self::Alerts
    }
}

